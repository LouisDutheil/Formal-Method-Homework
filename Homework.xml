<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int EMPTY = 0;
const int FIRE = 1;
const int EXIT = 2;

const int DRONE = 3;                //drones must not be placed on the grid because they're supposed to be able to hover over human entities (should not take room in the table)
const int FIRSTRESPONDER = 4;

const int SURVIVOR = 5;
const int SAFE = 6;
const int PNA = 7;
const int CASUALTY = 8;



const int WIDTH = 3;
const int HEIGHT = 3;

void initializeGrid() {
    // Set all cells to EMPTY initially
    for (int i = 0; i &lt; WIDTH; i++) {
        for (int j = 0; j &lt; HEIGHT; j++) {
            grid[i][j] = EMPTY;
        }
    }
    // Place exits in predefined positions
    grid[0][0] = EXIT;
    grid[WIDTH][1] = EXIT;

    //Place fire 
    grid[1][1] = FIRE;

    //Place Civilians
    grid [1][0] = SURVIVOR;
    //command to initialize the civilian automata with its coordinates

    //Place First Responders
    grid[0][1] = FIRSTRESPONDER;
    //command to initialize the firstresponder automata with its coordinates

    //Place Drones
    //command to initialize the drone automata with its coordinates
}</declaration>
	<template>
		<name x="5" y="5">Drone</name>
		<parameter>int[2] patrolStartPoint</parameter>
		<declaration>// Place local declarations here.
patrolStep = 0;
int droneX = 1, droneY = 1;    //need to find a way to instantiate these variables when the entities are placed on the grid
void moveDrone() {
    switch (patrolStep) {
        case 0: // Move right along the top row of the square
            if (droneX &lt; 3) {
                droneX++;
            } else {
                patrolStep++;
            }
            break;
        case 1: // Move down along the right column of the square
            if (droneY &lt; 3) {
                droneY++;
            } else {
                patrolStep++;
            }
            break;
        case 2: // Move left along the bottom row of the square
            if (droneX &gt; 1) {
                droneX--;
            } else {
                patrolStep++;
            }
            break;
        case 3: // Move up along the left column of the square
            if (droneY &gt; 1) {
                droneY--;
            } else {
                patrolStep = 0; // Reset patrolStep to repeat the sequence
            }
            break;
    }
}

bool isCivilianNearby(int x, int y) {
    // Check the eight neighboring cells around the drone position
    for (int dx = -1; dx &lt;= 1; dx++) {
        for (int dy = -1; dy &lt;= 1; dy++) {
            // Skip the current cell (the drone's position)
            if (dx == 0 &amp;&amp; dy == 0) {
                continue;
            }
            int nx = x + dx;
            int ny = y + dy;
            // Check if the neighboring cell is within the grid bounds
            if (nx &gt;= 0 &amp;&amp; nx &lt; WIDTH &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; HEIGHT) {
                // Check if the neighboring cell contains a civilian
                if (grid[nx][ny] == CIVILIAN) {
                    return true; // Civilian detected nearby
                }
            }
        }
    }
    return false; // No civilian detected nearby
}

void patrol() {
    // Move the drone to the next position in the patrol sequence
    moveDrone();

    // Update personDetected if a civilian is detected nearby
    personDetected = isCivilianNearby(droneX, droneY);
}</declaration>
		<location id="id0" x="-195" y="0">
			<name x="-214" y="-34">Patrol</name>
		</location>
		<location id="id1" x="450" y="76">
			<name x="382" y="42">Instruct Zero Responder</name>
		</location>
		<location id="id2" x="170" y="0">
			<name x="25" y="-59">Search for closest responder</name>
		</location>
		<location id="id3" x="442" y="-93">
			<name x="357" y="-127">Instruct First Responder</name>
		</location>
		<init ref="id0"/>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="161" y="161"/>
		</transition>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id0"/>
			<nail x="153" y="-204"/>
			<nail x="153" y="-204"/>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-119" y="-25">PNADetected</label>
		</transition>
		<transition id="id7">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-289" y="76">!PNADetected</label>
			<nail x="-119" y="67"/>
			<nail x="-229" y="67"/>
			<nail x="-255" y="67"/>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="238" y="68">distZR &lt; distFR</label>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="221" y="-93">distFR &lt; distZR</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
