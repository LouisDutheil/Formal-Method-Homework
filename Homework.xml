<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int EMPTY = 0;
const int FIRE = 1;
const int EXIT = 2;

const int DRONE = 3;                //drones must not be placed on the grid because they're supposed to be able to hover over human entities (should not take room in the table)
const int FIRSTRESPONDER = 4;

const int SURVIVOR = 5;
const int SAFE = 6;
const int PNA = 7;
const int CASUALTY = 8;


/*********GLOBAL SYSTEM PARAMETERS *****************/


const int WIDTH = 3; //grid width
const int HEIGHT = 3; //grid height
const int N_CIVILIANS = 10;  // Total number of civilians
const int Tv = 10; //time for the civilian to die close to a fire
const int Tfr = 10; //time to save a person


/*********GLOBAL SYSTEM PARAMETERS ****************/


/*********GLOBAL VARIABLES*************************/

int grid[MAP_H][MAP_W];    // map

/*********GLOBAL VARIABLES*************************/

/*** CHANNELS *************************************/

chan assist; // Channel used by drones to request first responders or survivors to assist
chan callFirstResponder; //Channel used by drones to request survivors to call a first responder to help a person in need

/*** CHANNELS *************************************/

/*** GLOBAL TYPES *********************************/

//...

/*** GLOBAL TYPES *************************************/

void initializeGrid() {
    // Set all cells to EMPTY initially
    for (int i = 0; i &lt; WIDTH; i++) {
        for (int j = 0; j &lt; HEIGHT; j++) {
            grid[i][j] = EMPTY;
        }
    }
    // Place exits in predefined positions
    grid[0][0] = EXIT;
    grid[WIDTH][1] = EXIT;

    //Place fire 
    grid[1][1] = FIRE;

    //Place Civilians
    grid [1][0] = SURVIVOR;
    //command to initialize the civilian automata with its coordinates

    //Place First Responders
    grid[0][1] = FIRSTRESPONDER;
    //command to initialize the firstresponder automata with its coordinates

    //Place Drones
    //command to initialize the drone automata with its coordinates
}


</declaration>
	<template>
		<name>Civilian</name>
		<declaration>clock x;


int posx[N_CIVILIANS];       // Array of x coordinates
int posy[N_CIVILIANS];       // Array of y coordinates
bool need[N_CIVILIANS]       // True if civilian is in need

/*
*/
void move() {
    //todo decide a moving policy when the civilian is a survivor
}

/*
    find the shortest path from the current civilian to the closest first
    responder. The civilian can't step near the fire, but can go near 
    exits.
    This is useful when the drone instructs the civilian to call a first 
    responder.
*/
int distance_to_first_responder(){

    //todo
}


/*
    checks if the entity is near the fire
*/
bool isFireNear(int x, int y, int grid[][], int numRows, int numCols) {
    // Directions for vertical and horizontal neighbors only
    int dx[] = {-1, 1, 0, 0}; // Up, Down
    int dy[] = {0, 0, -1, 1}; // Left, Right

    for (int i = 0; i &lt; 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        // Check if the new coordinates are within the grid bounds
        if (nx &gt;= 0 &amp;&amp; nx &lt; numRows &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; numCols) {
            if (grid[nx][ny] == FIRE) {
                return true;
            }
        }
    }

    return false; // No fire found nearby
}



/*
    checks if the entity is near the exit
*/
bool isExitNear(int x, int y, int grid[][], int numRows, int numCols) {
    // Directions for vertical and horizontal neighbors only
    int dx[] = {-1, 1, 0, 0}; // Up, Down
    int dy[] = {0, 0, -1, 1}; // Left, Right

    for (int i = 0; i &lt; 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        // Check if the new coordinates are within the grid bounds
        if (nx &gt;= 0 &amp;&amp; nx &lt; numRows &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; numCols) {
            if (grid[nx][ny] == EXIT) {
                return true;
            }
        }
    }

    return false; // No exit found nearby
}


/*
    returns the distance from a civilian in need to the given coordinates (x, y)
    calculates the minimum Manhattan distance from all 'in need' civilians to the coordinates (x, y)
*/
int getDistanceFromNeed(int x, int y) {
    int minDistance = INT_MAX; // Initialize to maximum possible int value

    // Iterate over all civilians
    for (int i = 0; i &lt; N_CIVILIANS; i++) {
        if (need[i]) { // Check if the civilian is in need
            int dist = abs(posx[i] - x) + abs(posy[i] - y); // Calculate Manhattan distance
            if (dist &lt; minDistance) {
                minDistance = dist; // Update minimum distance if current is lower
            }
        }
    }

    // Return the minimum distance found, or INT_MAX if no civilians in need were found
    return minDistance;
}


/*
   checks if Tv is expired
*/
bool checksTv() {
  if (x == Tv) { return true;}
  else return false;
}</declaration>
		<location id="id0" x="-493" y="-68">
			<name x="-544" y="-59">Initial</name>
			<urgent/>
		</location>
		<location id="id1" x="-807" y="-68">
			<name x="-841" y="-102">InNeed</name>
		</location>
		<location id="id2" x="-102" y="-68">
			<name x="-136" y="-102">Survivor</name>
		</location>
		<location id="id3" x="-221" y="34">
			<name x="-246" y="0">Saved</name>
		</location>
		<location id="id4" x="111" y="-68">
			<name x="52" y="-102">ZeroResponder</name>
			<label kind="invariant" x="-8" y="-51">x&lt;(distance from need + Tfr)</label>
		</location>
		<location id="id5" x="255" y="-153">
			<name x="170" y="-187">CallingFirstResponder</name>
			<label kind="comments" x="280" y="-161">remain here for 
dist(surv, FR) time</label>
		</location>
		<location id="id6" x="-807" y="-204">
			<name x="-824" y="-238">Dead</name>
		</location>
		<init ref="id0"/>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="-323" y="-178">move(id)</label>
			<nail x="-153" y="-153"/>
			<nail x="-433" y="-153"/>
		</transition>
		<transition id="id8">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="assignment" x="-765" y="85">need[id] = false</label>
			<label kind="comments" x="-671" y="119">when helped and time for helping finishes</label>
			<nail x="-807" y="110"/>
			<nail x="-272" y="110"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="guard" x="-807" y="-170">checksTv()</label>
			<label kind="assignment" x="-875" y="-136">need[id] = false</label>
			<label kind="comments" x="-901" y="-178">after Tv</label>
		</transition>
		<transition id="id10">
			<source ref="id5"/>
			<target ref="id3"/>
			<nail x="255" y="17"/>
			<nail x="255" y="85"/>
			<nail x="255" y="110"/>
			<nail x="-221" y="110"/>
		</transition>
		<transition id="id11">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-59" y="-178">callFirstResponder[id]?</label>
			<label kind="assignment" x="17" y="-195">x:=0</label>
			<nail x="33" y="-157"/>
		</transition>
		<transition id="id12">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-110" y="34">x=(distance from need + Tfr)</label>
			<label kind="assignment" x="-8" y="51">x=0</label>
			<label kind="comments" x="-1" y="8">After time to help</label>
			<nail x="110" y="34"/>
		</transition>
		<transition id="id13">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-34" y="-85">assist?</label>
			<label kind="assignment" x="-17" y="-68">x=0</label>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-518" y="42">isExitNear(posx[id], posy[id])</label>
			<nail x="-433" y="34"/>
		</transition>
		<transition id="id15">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-68">!isFireNear(posx[id], posy[id]) &amp;&amp;
!isExitNear(posx[id], posy[id])</label>
		</transition>
		<transition id="id16">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-782" y="-110">isFireNear(posx[id], posy[id]) &amp;&amp;
!isExitNear(posx[id], posy[id])</label>
			<label kind="assignment" x="-688" y="-68">need[id]=true</label>
			<nail x="-595" y="-67"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Drone</name>
		<parameter>int[2] patrolStartPoint</parameter>
		<declaration>// Place local declarations here.
patrolStep = 0;
int droneX = 1, droneY = 1;    //need to find a way to instantiate these variables when the entities are placed on the grid
void moveDrone() {
    switch (patrolStep) {
        case 0: // Move right along the top row of the square
            if (droneX &lt; 3) {
                droneX++;
            } else {
                patrolStep++;
            }
            break;
        case 1: // Move down along the right column of the square
            if (droneY &lt; 3) {
                droneY++;
            } else {
                patrolStep++;
            }
            break;
        case 2: // Move left along the bottom row of the square
            if (droneX &gt; 1) {
                droneX--;
            } else {
                patrolStep++;
            }
            break;
        case 3: // Move up along the left column of the square
            if (droneY &gt; 1) {
                droneY--;
            } else {
                patrolStep = 0; // Reset patrolStep to repeat the sequence
            }
            break;
    }
}

bool isCivilianNearby(int x, int y) {
    // Check the eight neighboring cells around the drone position
    for (int dx = -1; dx &lt;= 1; dx++) {
        for (int dy = -1; dy &lt;= 1; dy++) {
            // Skip the current cell (the drone's position)
            if (dx == 0 &amp;&amp; dy == 0) {
                continue;
            }
            int nx = x + dx;
            int ny = y + dy;
            // Check if the neighboring cell is within the grid bounds
            if (nx &gt;= 0 &amp;&amp; nx &lt; WIDTH &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; HEIGHT) {
                // Check if the neighboring cell contains a civilian
                if (grid[nx][ny] == CIVILIAN) {
                    return true; // Civilian detected nearby
                }
            }
        }
    }
    return false; // No civilian detected nearby
}

void patrol() {
    // Move the drone to the next position in the patrol sequence
    moveDrone();

    // Update personDetected if a civilian is detected nearby
    personDetected = isCivilianNearby(droneX, droneY);
}</declaration>
		<location id="id17" x="-195" y="0">
			<name x="-214" y="-34">Patrol</name>
		</location>
		<location id="id18" x="450" y="76">
			<name x="382" y="42">Instruct Zero Responder</name>
		</location>
		<location id="id19" x="170" y="0">
			<name x="25" y="-59">Search for closest responder</name>
		</location>
		<location id="id20" x="442" y="-93">
			<name x="357" y="-127">Instruct First Responder</name>
		</location>
		<init ref="id17"/>
		<transition id="id21">
			<source ref="id18"/>
			<target ref="id17"/>
			<nail x="161" y="161"/>
		</transition>
		<transition id="id22">
			<source ref="id20"/>
			<target ref="id17"/>
			<nail x="153" y="-204"/>
			<nail x="153" y="-204"/>
		</transition>
		<transition id="id23">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="-119" y="-25">PNADetected</label>
		</transition>
		<transition id="id24">
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="guard" x="-289" y="76">!PNADetected</label>
			<nail x="-119" y="67"/>
			<nail x="-229" y="67"/>
			<nail x="-255" y="67"/>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="238" y="68">distZR &lt; distFR</label>
		</transition>
		<transition id="id26">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="221" y="-93">distFR &lt; distZR</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
